./cpu.bin +mem_inst_fn=part2.inst.hex +mem_data_fn=part2.data.hex +vcd_dump_fn=part2.vcd
WARNING: verilog/test_cpu.v:51: $readmemh(part2.inst.hex): Not enough words in the file for the requested range [0:2047].
WARNING: verilog/test_cpu.v:53: $readmemh(part2.data.hex): Not enough words in the file for the requested range [2048:4095].
VCD info: dumpfile part2.vcd opened for output.
00100100000010000000000000000001
op = 09 rs = xx rt = xx rd = xx imm = xxxx addr = xxxxxxx
I type 001001
ALU: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx0000000000000001 -> 001001
ADD:          x =          x +          X
00100100000010000000000000000001
op = 09 rs = 00 rt = 08 rd = 00 imm = 0001 addr = 0080001
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000000001 -> 001001
ADD:          1 =          0 +          1
00100100000010010000000000000010
op = 09 rs = 00 rt = 08 rd = 00 imm = 0001 addr = 0080001
I type 001001
00100100000010010000000000000010
op = 09 rs = 00 rt = 09 rd = 00 imm = 0002 addr = 0090002
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000000010 -> 001001
ADD:          2 =          0 +          2
00000001000010010101000000100000
op = 00 rs = 00 rt = 09 rd = 00 imm = 0002 addr = 0090002
DEFAULT type 100000
ALU: 00000000000000000000000000000000 00000000000000000000000000000010 -> 100000
ADD:          2 =          0 +          2
00000001000010010101000000100000
op = 00 rs = 08 rt = 09 rd = 0a imm = 5020 addr = 1095020
DEFAULT type 100000
ALU: 00000000000000000000000000000001 00000000000000000000000000000010 -> 100000
ADD:          3 =          1 +          2
00000000000010100101100100000000
op = 00 rs = 08 rt = 09 rd = 0a imm = 5020 addr = 1095020
SHA type 000000
SHA 00000
ALU: 00000000000000000000000000000001 00000000000000000000000000000000 -> 000000
SLL: 00000000000000000000000000000001 = 00000000000000000000000000000001 << 00000000000000000000000000000000
00000000000010100101100100000000
op = 00 rs = 00 rt = 0a rd = 0b imm = 5900 addr = 00a5900
SHA type 000000
SHA 00100
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 000000
SLL: 00000000000000000000000000000000 = 00000000000000000000000000000000 << 00000000000000000000000000000000
00000001001010110110000000000111
op = 00 rs = 00 rt = 0a rd = 0b imm = 5900 addr = 00a5900
DEFAULT type 000111
ALU: 00000000000000000000000000000000 00000000000000000000000000000011 -> 000111
00000001001010110110000000000111
op = 00 rs = 09 rt = 0b rd = 0c imm = 6007 addr = 12b6007
DEFAULT type 000111
ALU: 00000000000000000000000000000010 00000000000000000000000000000011 -> 000111
ALU: 00000000000000000000000000000010 00000000000000000000000000000000 -> 000111
00111001100011010000000000001111
op = 0e rs = 09 rt = 0b rd = 0c imm = 6007 addr = 12b6007
I type 001110
ALU: 00000000000000000000000000000010 00000000000000000000000000001111 -> 001110
00111001100011010000000000001111
op = 0e rs = 0c rt = 0d rd = 00 imm = 000f addr = 18d000f
I type 001110
00000001101010100111000000100010
op = 00 rs = 0c rt = 0d rd = 00 imm = 000f addr = 18d000f
DEFAULT type 100010
ALU: 00000000000000000000000000000010 00000000000000000000000000001101 -> 100010
00000001101010100111000000100010
op = 00 rs = 0d rt = 0a rd = 0e imm = 7022 addr = 1aa7022
DEFAULT type 100010
ALU: 00000000000000000000000000001101 00000000000000000000000000001101 -> 100010
ALU: 00000000000000000000000000001101 00000000000000000000000000000011 -> 100010
00000001110010110111100000100101
op = 00 rs = 0d rt = 0a rd = 0e imm = 7022 addr = 1aa7022
DEFAULT type 100101
ALU: 00000000000000000000000000001101 00000000000000000000000000000011 -> 100101
00000001110010110111100000100101
op = 00 rs = 0e rt = 0b rd = 0f imm = 7825 addr = 1cb7825
DEFAULT type 100101
ALU: 00000000000000000000000000001010 00000000000000000000000000000011 -> 100101
ALU: 00000000000000000000000000001010 00000000000000000000000000000000 -> 100101
00100100000010001111111111111000
op = 09 rs = 0e rt = 0b rd = 0f imm = 7825 addr = 1cb7825
I type 001001
ALU: 00000000000000000000000000001010 00000000000000001111111111111000 -> 001001
ADD:      65538 =         10 +      65528
00100100000010001111111111111000
op = 09 rs = 00 rt = 08 rd = 1f imm = fff8 addr = 008fff8
I type 001001
ALU: 00000000000000000000000000000000 11111111111111111111111111111000 -> 001001
ADD: 4294967288 =          0 + 4294967288
00000001111010000100100000100000
op = 00 rs = 00 rt = 08 rd = 1f imm = fff8 addr = 008fff8
DEFAULT type 100000
ALU: 00000000000000000000000000000000 11111111111111111111111111111000 -> 100000
ADD: 4294967288 =          0 + 4294967288
00000001111010000100100000100000
op = 00 rs = 0f rt = 08 rd = 09 imm = 4820 addr = 1e84820
DEFAULT type 100000
ALU: 00000000000000000000000000001010 11111111111111111111111111111000 -> 100000
ADD:          2 =         10 + 4294967288
00000000000010010101000010000010
op = 00 rs = 0f rt = 08 rd = 09 imm = 4820 addr = 1e84820
SHA type 000010
SHA 00000
ALU: 00000000000000000000000000001010 00000000000000000000000000000000 -> 000010
00000000000010010101000010000010
op = 00 rs = 00 rt = 09 rd = 0a imm = 5082 addr = 0095082
SHA type 000010
SHA 00010
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 000010
00100001010001000000000000100000
op = 08 rs = 00 rt = 09 rd = 0a imm = 5082 addr = 0095082
I type 001000
ALU: 00000000000000000000000000000000 00000000000000000000000000100000 -> 001000
ADD:         32 =          0 +         32
00100001010001000000000000100000
op = 08 rs = 0a rt = 04 rd = 00 imm = 0020 addr = 1440020
I type 001000
00100100000000100000000000000001
op = 09 rs = 0a rt = 04 rd = 00 imm = 0020 addr = 1440020
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000100000 -> 001001
ADD:         32 =          0 +         32
00100100000000100000000000000001
op = 09 rs = 00 rt = 02 rd = 00 imm = 0001 addr = 0020001
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000000001 -> 001001
ADD:          1 =          0 +          1
00000000000000000000000000001100
op = 00 rs = 00 rt = 02 rd = 00 imm = 0001 addr = 0020001
NOP/SYSCAL type 001100
s y s c a l l . . . 00000000000000000000000000000000
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 100110
00000000000000000000000000001100
op = 00 rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
NOP/SYSCAL type 001100
00100100000000100000000000001010
op = 09 rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000001010 -> 001001
ADD:         10 =          0 +         10
00100100000000100000000000001010
op = 09 rs = 00 rt = 02 rd = 00 imm = 000a addr = 002000a
I type 001001
00000000000000000000000000001100
op = 00 rs = 00 rt = 02 rd = 00 imm = 000a addr = 002000a
NOP/SYSCAL type 001100
s y s c a l l . . . 00000000000000000000000000000000
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 100110
00000000000000000000000000001100
op = 00 rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
NOP/SYSCAL type 001100
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
op = xx rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
op = xx rs = xx rt = xx rd = xx imm = xxxx addr = xxxxxxx
Are you sure you should be running this long?
iverilog -Wall -g2012 -o cpu.bin -I verilog verilog/test_cpu.v
./cpu.bin +mem_inst_fn=part2.inst.hex +mem_data_fn=part2.data.hex +vcd_dump_fn=part2.vcd
WARNING: verilog/test_cpu.v:51: $readmemh(part2.inst.hex): Not enough words in the file for the requested range [0:2047].
WARNING: verilog/test_cpu.v:53: $readmemh(part2.data.hex): Not enough words in the file for the requested range [2048:4095].
VCD info: dumpfile part2.vcd opened for output.
24080001
op = 09 rs = xx rt = xx rd = xx imm = xxxx addr = xxxxxxx
I type 001001
ALU: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx0000000000000001 -> 001001
ADD:          x =          x +          X
24080001
op = 09 rs = 00 rt = 08 rd = 00 imm = 0001 addr = 0080001
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000000001 -> 001001
ADD:          1 =          0 +          1
24090002
op = 09 rs = 00 rt = 08 rd = 00 imm = 0001 addr = 0080001
I type 001001
24090002
op = 09 rs = 00 rt = 09 rd = 00 imm = 0002 addr = 0090002
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000000010 -> 001001
ADD:          2 =          0 +          2
01095020
op = 00 rs = 00 rt = 09 rd = 00 imm = 0002 addr = 0090002
DEFAULT type 100000
ALU: 00000000000000000000000000000000 00000000000000000000000000000010 -> 100000
ADD:          2 =          0 +          2
01095020
op = 00 rs = 08 rt = 09 rd = 0a imm = 5020 addr = 1095020
DEFAULT type 100000
ALU: 00000000000000000000000000000001 00000000000000000000000000000010 -> 100000
ADD:          3 =          1 +          2
000a5900
op = 00 rs = 08 rt = 09 rd = 0a imm = 5020 addr = 1095020
SHA type 000000
SHA 00000
ALU: 00000000000000000000000000000001 00000000000000000000000000000000 -> 000000
SLL: 00000000000000000000000000000001 = 00000000000000000000000000000001 << 00000000000000000000000000000000
000a5900
op = 00 rs = 00 rt = 0a rd = 0b imm = 5900 addr = 00a5900
SHA type 000000
SHA 00100
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 000000
SLL: 00000000000000000000000000000000 = 00000000000000000000000000000000 << 00000000000000000000000000000000
012b6007
op = 00 rs = 00 rt = 0a rd = 0b imm = 5900 addr = 00a5900
DEFAULT type 000111
ALU: 00000000000000000000000000000000 00000000000000000000000000000011 -> 000111
012b6007
op = 00 rs = 09 rt = 0b rd = 0c imm = 6007 addr = 12b6007
DEFAULT type 000111
ALU: 00000000000000000000000000000010 00000000000000000000000000000011 -> 000111
ALU: 00000000000000000000000000000010 00000000000000000000000000000000 -> 000111
398d000f
op = 0e rs = 09 rt = 0b rd = 0c imm = 6007 addr = 12b6007
I type 001110
ALU: 00000000000000000000000000000010 00000000000000000000000000001111 -> 001110
398d000f
op = 0e rs = 0c rt = 0d rd = 00 imm = 000f addr = 18d000f
I type 001110
01aa7022
op = 00 rs = 0c rt = 0d rd = 00 imm = 000f addr = 18d000f
DEFAULT type 100010
ALU: 00000000000000000000000000000010 00000000000000000000000000001101 -> 100010
01aa7022
op = 00 rs = 0d rt = 0a rd = 0e imm = 7022 addr = 1aa7022
DEFAULT type 100010
ALU: 00000000000000000000000000001101 00000000000000000000000000001101 -> 100010
ALU: 00000000000000000000000000001101 00000000000000000000000000000011 -> 100010
01cb7825
op = 00 rs = 0d rt = 0a rd = 0e imm = 7022 addr = 1aa7022
DEFAULT type 100101
ALU: 00000000000000000000000000001101 00000000000000000000000000000011 -> 100101
01cb7825
op = 00 rs = 0e rt = 0b rd = 0f imm = 7825 addr = 1cb7825
DEFAULT type 100101
ALU: 00000000000000000000000000001010 00000000000000000000000000000011 -> 100101
ALU: 00000000000000000000000000001010 00000000000000000000000000000000 -> 100101
2408fff8
op = 09 rs = 0e rt = 0b rd = 0f imm = 7825 addr = 1cb7825
I type 001001
ALU: 00000000000000000000000000001010 00000000000000001111111111111000 -> 001001
ADD:      65538 =         10 +      65528
2408fff8
op = 09 rs = 00 rt = 08 rd = 1f imm = fff8 addr = 008fff8
I type 001001
ALU: 00000000000000000000000000000000 11111111111111111111111111111000 -> 001001
ADD: 4294967288 =          0 + 4294967288
01e84820
op = 00 rs = 00 rt = 08 rd = 1f imm = fff8 addr = 008fff8
DEFAULT type 100000
ALU: 00000000000000000000000000000000 11111111111111111111111111111000 -> 100000
ADD: 4294967288 =          0 + 4294967288
01e84820
op = 00 rs = 0f rt = 08 rd = 09 imm = 4820 addr = 1e84820
DEFAULT type 100000
ALU: 00000000000000000000000000001010 11111111111111111111111111111000 -> 100000
ADD:          2 =         10 + 4294967288
00095082
op = 00 rs = 0f rt = 08 rd = 09 imm = 4820 addr = 1e84820
SHA type 000010
SHA 00000
ALU: 00000000000000000000000000001010 00000000000000000000000000000000 -> 000010
00095082
op = 00 rs = 00 rt = 09 rd = 0a imm = 5082 addr = 0095082
SHA type 000010
SHA 00010
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 000010
21440020
op = 08 rs = 00 rt = 09 rd = 0a imm = 5082 addr = 0095082
I type 001000
ALU: 00000000000000000000000000000000 00000000000000000000000000100000 -> 001000
ADD:         32 =          0 +         32
21440020
op = 08 rs = 0a rt = 04 rd = 00 imm = 0020 addr = 1440020
I type 001000
24020001
op = 09 rs = 0a rt = 04 rd = 00 imm = 0020 addr = 1440020
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000100000 -> 001001
ADD:         32 =          0 +         32
24020001
op = 09 rs = 00 rt = 02 rd = 00 imm = 0001 addr = 0020001
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000000001 -> 001001
ADD:          1 =          0 +          1
0000000c
op = 00 rs = 00 rt = 02 rd = 00 imm = 0001 addr = 0020001
NOP/SYSCAL type 001100
s y s c a l l . . . 00000000000000000000000000000000
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 100110
0000000c
op = 00 rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
NOP/SYSCAL type 001100
2402000a
op = 09 rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
I type 001001
ALU: 00000000000000000000000000000000 00000000000000000000000000001010 -> 001001
ADD:         10 =          0 +         10
2402000a
op = 09 rs = 00 rt = 02 rd = 00 imm = 000a addr = 002000a
I type 001001
0000000c
op = 00 rs = 00 rt = 02 rd = 00 imm = 000a addr = 002000a
NOP/SYSCAL type 001100
s y s c a l l . . . 00000000000000000000000000000000
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 100110
0000000c
op = 00 rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
NOP/SYSCAL type 001100
xxxxxxxx
op = xx rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
xxxxxxxx
op = xx rs = xx rt = xx rd = xx imm = xxxx addr = xxxxxxx
Are you sure you should be running this long?
java -jar bin/Mars4_5.jar db mc CompactTextAtZero dump .text HexText fib.inst.hex asm/fib.asm
MARS 4.5  Copyright 2003-2014 Pete Sanderson and Kenneth Vollmar

8
touch fib.inst.hex
java -jar bin/Mars4_5.jar db mc CompactTextAtZero dump .data HexText fib.data.hex asm/fib.asm
MARS 4.5  Copyright 2003-2014 Pete Sanderson and Kenneth Vollmar

8
This segment has not been written to, there is nothing to dump.
touch fib.data.hex
./cpu.bin +mem_inst_fn=fib.inst.hex +mem_data_fn=fib.data.hex +vcd_dump_fn=fib.vcd
WARNING: verilog/test_cpu.v:51: $readmemh(fib.inst.hex): Not enough words in the file for the requested range [0:2047].
WARNING: verilog/test_cpu.v:53: $readmemh(fib.data.hex): Not enough words in the file for the requested range [2048:4095].
VCD info: dumpfile fib.vcd opened for output.
20040005
op = 08 rs = xx rt = xx rd = xx imm = xxxx addr = xxxxxxx
I type 001000
ALU: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx0000000000000101 -> 001000
ADD:          x =          x +          X
20040005
op = 08 rs = 00 rt = 04 rd = 00 imm = 0005 addr = 0040005
I type 001000
ALU: 00000000000000000000000000000000 00000000000000000000000000000101 -> 001000
ADD:          5 =          0 +          5
20080001
op = 08 rs = 00 rt = 04 rd = 00 imm = 0005 addr = 0040005
I type 001000
20080001
op = 08 rs = 00 rt = 08 rd = 00 imm = 0001 addr = 0080001
I type 001000
ALU: 00000000000000000000000000000000 00000000000000000000000000000001 -> 001000
ADD:          1 =          0 +          1
20090001
op = 08 rs = 00 rt = 08 rd = 00 imm = 0001 addr = 0080001
I type 001000
20090001
op = 08 rs = 00 rt = 09 rd = 00 imm = 0001 addr = 0090001
I type 001000
200a0002
op = 08 rs = 00 rt = 09 rd = 00 imm = 0001 addr = 0090001
I type 001000
200a0002
op = 08 rs = 00 rt = 0a rd = 00 imm = 0002 addr = 00a0002
I type 001000
ALU: 00000000000000000000000000000000 00000000000000000000000000000010 -> 001000
ADD:          2 =          0 +          2
01095820
op = 00 rs = 00 rt = 0a rd = 00 imm = 0002 addr = 00a0002
DEFAULT type 100000
ALU: 00000000000000000000000000000000 00000000000000000000000000000010 -> 100000
ADD:          2 =          0 +          2
01095820
op = 00 rs = 08 rt = 09 rd = 0b imm = 5820 addr = 1095820
DEFAULT type 100000
ALU: 00000000000000000000000000000001 00000000000000000000000000000010 -> 100000
ADD:          3 =          1 +          2
ALU: 00000000000000000000000000000001 00000000000000000000000000000001 -> 100000
ADD:          2 =          1 +          1
11440004
op = 04 rs = 08 rt = 09 rd = 0b imm = 5820 addr = 1095820
11440004
op = 04 rs = 0a rt = 04 rd = 00 imm = 0004 addr = 1440004
214a0001
op = 08 rs = 0a rt = 04 rd = 00 imm = 0004 addr = 1440004
I type 001000
ALU: 00000000000000000000000000000010 00000000000000000000000000000001 -> 001000
ADD:          3 =          2 +          1
214a0001
op = 08 rs = 0a rt = 0a rd = 00 imm = 0001 addr = 14a0001
I type 001000
ALU: 00000000000000000000000000000011 00000000000000000000000000000001 -> 001000
ADD:          4 =          3 +          1
00084820
op = 00 rs = 0a rt = 0a rd = 00 imm = 0001 addr = 14a0001
DEFAULT type 100000
ALU: 00000000000000000000000000000011 00000000000000000000000000000011 -> 100000
ADD:          6 =          3 +          3
00084820
op = 00 rs = 00 rt = 08 rd = 09 imm = 4820 addr = 0084820
DEFAULT type 100000
ALU: 00000000000000000000000000000000 00000000000000000000000000000011 -> 100000
ADD:          3 =          0 +          3
ALU: 00000000000000000000000000000000 00000000000000000000000000000001 -> 100000
ADD:          1 =          0 +          1
000b4020
op = 00 rs = 00 rt = 08 rd = 09 imm = 4820 addr = 0084820
DEFAULT type 100000
000b4020
op = 00 rs = 00 rt = 0b rd = 08 imm = 4020 addr = 00b4020
DEFAULT type 100000
ALU: 00000000000000000000000000000000 00000000000000000000000000000010 -> 100000
ADD:          2 =          0 +          2
08000004
op = 02 rs = 00 rt = 0b rd = 08 imm = 4020 addr = 00b4020
08000004
op = 02 rs = 00 rt = 00 rd = 00 imm = 0004 addr = 0000004
000b2020
op = 00 rs = 00 rt = 00 rd = 00 imm = 0004 addr = 0000004
DEFAULT type 100000
000b2020
op = 00 rs = 00 rt = 0b rd = 04 imm = 2020 addr = 00b2020
DEFAULT type 100000
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 100000
ADD:          0 =          0 +          0
ALU: 00000000000000000000000000000000 00000000000000000000000000000010 -> 100000
ADD:          2 =          0 +          2
20020001
op = 08 rs = 00 rt = 0b rd = 04 imm = 2020 addr = 00b2020
I type 001000
ALU: 00000000000000000000000000000000 00000000000000000000000000000001 -> 001000
ADD:          1 =          0 +          1
20020001
op = 08 rs = 00 rt = 02 rd = 00 imm = 0001 addr = 0020001
I type 001000
0000000c
op = 00 rs = 00 rt = 02 rd = 00 imm = 0001 addr = 0020001
NOP/SYSCAL type 001100
s y s c a l l . . . 00000000000000000000000000000000
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 100110
0000000c
op = 00 rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
NOP/SYSCAL type 001100
2002000a
op = 08 rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
I type 001000
ALU: 00000000000000000000000000000000 00000000000000000000000000001010 -> 001000
ADD:         10 =          0 +         10
2002000a
op = 08 rs = 00 rt = 02 rd = 00 imm = 000a addr = 002000a
I type 001000
0000000c
op = 00 rs = 00 rt = 02 rd = 00 imm = 000a addr = 002000a
NOP/SYSCAL type 001100
s y s c a l l . . . 00000000000000000000000000000000
ALU: 00000000000000000000000000000000 00000000000000000000000000000000 -> 100110
0000000c
op = 00 rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
NOP/SYSCAL type 001100
xxxxxxxx
op = xx rs = 00 rt = 00 rd = 00 imm = 000c addr = 000000c
xxxxxxxx
op = xx rs = xx rt = xx rd = xx imm = xxxx addr = xxxxxxx
Are you sure you should be running this long?
